package day06.oop;

// import 단축키 -> Ctrl + Shift + o
import day06.mypac.Card;

/*
 *	[[ OOP(Object Oriented Programing) ]]
 *	 - 객체지향 프로그래밍
 *	 - 프로그램을 작성할 때 데이터와 데이터를 조작하는 메소드(함수)를
 *	   하나의 논리적 단위인 객체로 묶는 방식
 *	 
 *	[[ 객체(Object) ]]
 *	 - 물리적으로 존재하거나 추상적으로 생각할 수 있는 것 중에서
 *	   정의 가능하고 식별 가능한 것을 말한다.
 *
 *	 예) 물리적인 것 - 사람, 모니터, 컴퓨터, 학생
 *	    추상적인 것 -주문, 회계장부, 생산 등...
 *
 *	[[ Class ]]
 *	 - 객체를 만들기 위한 설계도
 *	 - Class에 작성된 코드를 읽어 인스턴스화(객체화) 한다. => 메모리에 올린다!!
 *	 예) 와플기계
 *
 * 	클래스 구조
 * 	(접근제어자) class 클래스명 (extends 상속) (implements 인터페이스 상속) { // 클래스 선언부
 *	 	(생성자) => 초기화
 * 		변수(멤버변수, 멤버필드) => 속성
 * 		메소드(멤버메소드) => 기능
 *  }
 *  
 *  객체화 - new 연산자로 이스턴스화 가능!
 *  클래스명(타입) 변수명 = new 클래스명();
 *  
 * 
 */

public class MainClass01 {
	public static void main(String[] args) {
		Card card = new Card();
		Card card2 = new Card();
		
		System.out.println("card type : " + card.type);
		System.out.println("card tnumber : " + card.number);
		
		System.out.println("card2 type : " + card2.type);
		System.out.println("card2 number : " + card2.number);
		
		System.out.println("card width : " + card.width);
		System.out.println("card2 width : " + card2.width);
		
		
		card.number = "10";
		card.width = 72;
		
		// 변경 후
		System.out.println(card.number);
		System.out.println(card2.number);
		
		System.out.println("card width : " + card.width);
		System.out.println("card2 width : " + card2.width);
	}
}
